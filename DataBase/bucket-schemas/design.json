[{"controllers": {"compact": "/pools/default/buckets/schemas/ddocs/_design%2FTest/controller/compactView", "setUpdateMinChanges": "/pools/default/buckets/schemas/ddocs/_design%2FTest/controller/setUpdateMinChanges"}, "doc": {"json": {"views": {"test": {"map": "function (doc, meta) {\n   // if(JSON.stringify(doc).indexOf(\"MfrProCatCitySupplier\")>-1)\n  \n  if(meta.id.indexOf(\"Product-\") == 0)\n //for(var key in doc[\"@properties\"])\n  //emit(key,doc[\"@properties\"][key].dataType.type);\n    emit(1,doc)\n    \n}"}, "all_formulas": {"map": "function (doc, meta) {\n  if(doc[\"@properties\"]){\n    for(var key in doc[\"@properties\"]){\n      if(doc[\"@properties\"][key].dataType && doc[\"@properties\"][key].dataType.type==\"formula\")\n        emit(doc[\"@properties\"][key].dataType.expression, doc[\"@properties\"][key]);\n    }\n  }\n}"}, "getAllDependentProperties": {"map": "function (doc, meta) {\n  if(meta.id.indexOf(\"Product-\")==0)\n  emit(Object.keys(doc[\"@properties\"]));\n}"}}}, "meta": {"rev": "1-6ff5fd90", "id": "_design/Test"}}}, {"controllers": {"compact": "/pools/default/buckets/schemas/ddocs/_design%2FTrigger/controller/compactView", "setUpdateMinChanges": "/pools/default/buckets/schemas/ddocs/_design%2FTrigger/controller/setUpdateMinChanges"}, "doc": {"json": {"views": {"getAllTriggers": {"map": "function (doc, meta) {\n  if(doc.docType==\"trigger\"){\n    emit([doc.cloudPointHostId], doc);\n  }\n}"}}}, "meta": {"rev": "1-bd848360", "id": "_design/Trigger"}}}, {"controllers": {"compact": "/pools/default/buckets/schemas/ddocs/_design%2Fdev_Test/controller/compactView", "setUpdateMinChanges": "/pools/default/buckets/schemas/ddocs/_design%2Fdev_Test/controller/setUpdateMinChanges"}, "doc": {"json": {"views": {"test": {"map": "function (doc, meta) {\n   // if(JSON.stringify(doc).indexOf(\"MfrProCatCitySupplier\")>-1)\n  \n  if(meta.id.indexOf(\"Product-\") == 0)\n //for(var key in doc[\"@properties\"])\n  //emit(key,doc[\"@properties\"][key].dataType.type);\n    emit(1,doc[\"@id\"])\n    \n}"}, "all_formulas": {"map": "function (doc, meta) {\n  if(doc[\"@properties\"]){\n    for(var key in doc[\"@properties\"]){\n      if(doc[\"@properties\"][key].dataType && doc[\"@properties\"][key].dataType.type==\"formula\")\n        emit(doc[\"@properties\"][key].dataType.expression, doc[\"@properties\"][key]);\n    }\n  }\n}"}, "getAllDependentProperties": {"map": "function (doc, meta) {\n  if(meta.id.indexOf(\"Product-\")==0)\n  emit(Object.keys(doc[\"@properties\"]));\n}"}}}, "meta": {"rev": "1-769eb2bc", "id": "_design/dev_Test"}}}, {"controllers": {"compact": "/pools/default/buckets/schemas/ddocs/_design%2Fdev_Trigger/controller/compactView", "setUpdateMinChanges": "/pools/default/buckets/schemas/ddocs/_design%2Fdev_Trigger/controller/setUpdateMinChanges"}, "doc": {"json": {"views": {"getAllTriggers": {"map": "function (doc, meta) {\n  if(doc.docType==\"trigger\"){\n    emit([doc.cloudPointHostId], doc);\n  }\n}"}}}, "meta": {"rev": "1-368f17b7", "id": "_design/dev_Trigger"}}}, {"controllers": {"compact": "/pools/default/buckets/schemas/ddocs/_design%2Fdev_genericMeta/controller/compactView", "setUpdateMinChanges": "/pools/default/buckets/schemas/ddocs/_design%2Fdev_genericMeta/controller/setUpdateMinChanges"}, "doc": {"json": {"views": {"uniqueUserNames": {"map": "function (doc, meta) {\n  if(doc[\"@uniqueUserName\"])\n    emit(doc[\"@uniqueUserName\"].toUpperCase(), {\"@abstractObject\": doc[\"@abstractObject\"],\n                                                \"@id\": doc[\"@id\"],\n                                                \"navFilters\":doc[\"navFilters\"]});\n}"}, "getRelationDesc": {"map": "function (doc, meta) {\n  if(doc[\"@type\"]==\"RelationSchema\")\n  emit(doc[\"@id\"], doc[\"@relationDesc\"]);\n}"}}}, "meta": {"rev": "1-ca5c74fb", "id": "_design/dev_genericMeta"}}}, {"controllers": {"compact": "/pools/default/buckets/schemas/ddocs/_design%2Fdev_schema/controller/compactView", "setUpdateMinChanges": "/pools/default/buckets/schemas/ddocs/_design%2Fdev_schema/controller/setUpdateMinChanges"}, "doc": {"json": {"views": {"getDerivedObjects": {"map": "function (doc, meta) { \n  if((doc[\"@type\"] == \"derivedObject\" || doc[\"@type\"]==\"dependentObject\") && doc.status !=\"Deleted\")\n  emit(doc[\"@abstractObject\"], doc[\"@id\"]);\n}"}, "getAllSchemas": {"map": "\nfunction (doc, meta) {\n  if(doc[\"@id\"]){\n    if(typeof doc.cloudPointHostId==\"object\"){\n      for(var i=0;i<doc.cloudPointHostId.length;i++)\n      emit(doc.cloudPointHostId, doc[\"@id\"]);\n    }else{\n  \t emit(doc.cloudPointHostId, doc[\"@id\"]);\n    }\n  }\n}"}, "getCustomSchema": {"map": "function (doc, meta) {\n  if(doc[\"@type\"] == \"Object\" || doc[\"@type\"]==\"RelationSchema\" || doc[\"@type\"] == \"abstractObject\" )\n  emit(doc.cloudPointHostId, doc[\"@id\"]);\n}"}, "getSuperTypeSchemas": {"map": "\nfunction (doc, meta) {\n  if(doc[\"@type\"] == \"Object\")\n  emit([doc.cloudPointHostId,doc[\"@superType\"]], doc[\"@id\"]);\n}"}, "getUserSchemas": {"map": "function (doc, meta) {\n  if(doc.docType==\"schema\")\n  emit([doc.cloudPointHostId,doc[\"@type\"]], doc[\"@id\"]);\n}"}, "getSchemas": {"map": "function (doc, meta) {\n  if(doc.hasOwnProperty('@id') && doc[\"@type\"]!=\"stdLookup\" && doc[\"@type\"] != \"struct\")\n  emit(doc.cloudPointHostId, doc[\"@id\"]);\n}"}, "getStructNames": {"map": "function (doc, meta) {\n  if(doc[\"@type\"] == \"struct\")\n  emit(doc[\"@type\"], doc[\"@id\"]);\n}"}, "getUserStructs": {"map": "function (doc, meta) {\n  if(doc[\"@type\"] == \"struct\" && doc.docType==\"schema\")\n  emit(null, doc[\"@id\"]);\n}"}, "getAllSchemasStructsDependentSchemas": {"map": "function (doc, meta) {\n  if(doc[\"@id\"]){\n    if(typeof doc.cloudPointHostId==\"object\"){\n      for(var i=0;i<doc.cloudPointHostId.length;i++)\n      emit(doc.cloudPointHostId[i], doc);\n    }else{\n  \temit(doc.cloudPointHostId, doc);\n    }\n  }\n}"}}}, "meta": {"rev": "1-0bc98b69", "id": "_design/dev_schema"}}}, {"controllers": {"compact": "/pools/default/buckets/schemas/ddocs/_design%2FgenericMeta/controller/compactView", "setUpdateMinChanges": "/pools/default/buckets/schemas/ddocs/_design%2FgenericMeta/controller/setUpdateMinChanges"}, "doc": {"json": {"views": {"uniqueUserNames": {"map": "function (doc, meta) {\n  if(doc[\"@uniqueUserName\"])\n    emit(doc[\"@uniqueUserName\"].toUpperCase(), {\"@abstractObject\": doc[\"@abstractObject\"],\n                                                \"@id\": doc[\"@id\"],\n                                                \"navFilters\":doc[\"navFilters\"]});\n}"}, "getRelationDesc": {"map": "function (doc, meta) {\n  if(doc[\"@type\"]==\"RelationSchema\")\n  emit(doc[\"@id\"], doc[\"@relationDesc\"]);\n}"}}}, "meta": {"rev": "1-3e73d022", "id": "_design/genericMeta"}}}, {"controllers": {"compact": "/pools/default/buckets/schemas/ddocs/_design%2Fschema/controller/compactView", "setUpdateMinChanges": "/pools/default/buckets/schemas/ddocs/_design%2Fschema/controller/setUpdateMinChanges"}, "doc": {"json": {"views": {"getDerivedObjects": {"map": "function (doc, meta) { \n  if((doc[\"@type\"] == \"derivedObject\" || doc[\"@type\"]==\"dependentObject\") && doc.status !=\"Deleted\")\n  emit(doc[\"@abstractObject\"], doc[\"@id\"]);\n}"}, "getAllSchemas": {"map": "\nfunction (doc, meta) {\n  if(doc[\"@id\"]){\n    if(typeof doc.cloudPointHostId==\"object\"){\n      for(var i=0;i<doc.cloudPointHostId.length;i++)\n      emit(doc.cloudPointHostId, doc[\"@id\"]);\n    }else{\n  \t emit(doc.cloudPointHostId, doc[\"@id\"]);\n    }\n  }\n}"}, "getCustomSchema": {"map": "function (doc, meta) {\n  if(doc[\"@type\"] == \"Object\" || doc[\"@type\"]==\"RelationSchema\" || doc[\"@type\"] == \"abstractObject\" )\n  emit(doc.cloudPointHostId, doc[\"@id\"]);\n}"}, "getSuperTypeSchemas": {"map": "\nfunction (doc, meta) {\n  if(doc[\"@type\"] == \"Object\")\n  emit([doc.cloudPointHostId,doc[\"@superType\"]], doc[\"@id\"]);\n}"}, "getUserSchemas": {"map": "function (doc, meta) {\n  if(doc.docType==\"schema\")\n  emit([doc.cloudPointHostId,doc[\"@type\"]], doc[\"@id\"]);\n}"}, "getSchemas": {"map": "function (doc, meta) {\n  if(doc.hasOwnProperty('@id') && doc[\"@type\"]!=\"stdLookup\" && doc[\"@type\"] != \"struct\")\n  emit(doc.cloudPointHostId, doc[\"@id\"]);\n}"}, "getStructNames": {"map": "function (doc, meta) {\n  if(doc[\"@type\"] == \"struct\")\n  emit(doc[\"@type\"], doc[\"@id\"]);\n}"}, "getUserStructs": {"map": "function (doc, meta) {\n  if(doc[\"@type\"] == \"struct\" && doc.docType==\"schema\")\n  emit(null, doc[\"@id\"]);\n}"}, "getAllSchemasStructsDependentSchemas": {"map": "function (doc, meta) {\n  if(doc[\"@id\"]){\n    if(typeof doc.cloudPointHostId==\"object\"){\n      for(var i=0;i<doc.cloudPointHostId.length;i++)\n      emit(doc.cloudPointHostId[i], doc);\n    }else{\n  \temit(doc.cloudPointHostId, doc);\n    }\n  }\n}"}}}, "meta": {"rev": "1-32175a56", "id": "_design/schema"}}}]