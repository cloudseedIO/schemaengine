/**
 * @file Node.js client for QuickBooks V3 API
 * @author saikiran.vadlakonda
 * @date 22nd December, 2015
 * 
 */

var QuickBooks = require('node-quickbooks');
/**
 * Currently using development keys, These keys have to change to production keys.
 */
/*
{ oauth_token_secret: '917XXeXYTou2DZoWmDmh77KbIP2qk47zSWXIpu7z',
	  oauth_token: 'qyprdY1oMqY64WZ8PTKUjeIvED1EbeVnjhQmpKDj8ON2zxdT' }
	In callback, realmId: 123145657880057
	
* { oauth_token_secret: 'FT5LqvWk47m1krz164f0rfFyQRbA6vMeHMNjBVNV',
  oauth_token: 'lvprdQmXYmqhOsmgDI8yxLjWbLX8Y32j8eHTF38e14ajRSuN' }
	In callback, realmId: 123145657880057

To generate OAuth Token and OAuth Token Secrete
@refer https://developer.intuit.com/docs/0100_accounting/0060_authentication_and_authorization/connect_from_within_your_app
After generating tokens we have to renew the tokens by calling reconnect on qbo object
@refer https://developer.intuit.com/docs/0050_quickbooks_api/0020_authentication_and_authorization/oauth_management_api#/Reconnect

*
*/

var consumerKeyIn="qyprd9DTQpiQQ9psVBVIoMYQCJueyv";
var consumerSecretIn="4oHAsGz286tdd2UeM5VAvxQ6wf2NMSnfTbOl8PE4";
var oauthTokenIn='qyprdR2zPE9Nst4WEKJQr7gKAGC7sL02QdmxnCxmKLBjF1bd';
var oauthTokenSecreteIn='68vArJ342HEOSzbLo6LRQ3v4PxWrlishhIaAv7XU';
var realmIdIn=123145657880057;


/**
 * Creating QuickBooks object to invoke CRUD API
 * 
 * First arg - consumer key of the App
 * Second arg- consumer secrete key of the App
 * Third arg - OAuth Token generated by User
 * Fourth arg- OAuth Secrete Token
 * Fifth arg - realm id 
 * Sixth arg - Boolean, true for sandbox, false for production mode
 * Seventh arg - Boolean, true for debug mode on, false for off
 */
var qbo = undefined;

if(qbo==undefined){
	qbo = new QuickBooks(consumerKeyIn, consumerSecretIn, oauthTokenIn, oauthTokenSecreteIn, realmIdIn, true, false);
}

/*
Account:
-------

	Id				: required for Update,(Optional while creating)
	SyncToken		: String, read-only,(Initial 0)
	MetaData		: ModificationMetaData, children CreateTime:UTC, LastUpdatedTime:UTC
	Name*			: String, Max 100 chars, must not contain double quotes(") or colon(:)
	SubAccount		: Boolean
	ParentRef		: ReferenceType
	Description		: String, Max 100 chars
	FullyQualifiedName: String, default is Name+ParentRef
	Active			: Boolean, default is true
	Classification	: String, derived from AccountType and AccountSubtype, valid: Asset, Equity, Expense, Liability, Revenue
	AccountType*	: AccountTypeEnum, 
	AccountSubType*	: String, 
	AcctNum			: String, req for France locales
	CurrentBalance	: Decimal, Valid for Balance Sheet Accounts
	CurrentBalanceWithSubAccounts: Decimal
	CurrencyRef		: CurrencyRef, {value*:string[USD,AUD,EUR], name:string}
	AccountAlias	: String, default is Account Name
	TxnLocationType	: WithFrance
*/

function createAccount(accountData, callback){
	
	if(accountData && (accountData.Name.length>0) && (accountData.AccountType||accountData.AccountSubType) && callback.constructor==Function){
	
		qbo.createAccount(accountData, function(error, response){
			if(error){
				callback({"error":error});
			}else{
				console.log("Account Created with: "+(JSON.stringify(response)));
				callback({"success":response});
			}
		});
	}else{
		console.log("Values are mandatory for Account Name and AccountType or AccountSubType");
		callback({"error":"Values are mandatory for Account Name and AccountType or AccountSubType"});
	}
}
/**
 * @author SAIKIRAN VADLAKONDA
 * 
 * @param accountId - {String} Must be the Id of the Account
 * @param callback - {Function} callback function to execute after success or failure
 * 
 * 
 */
function getAccountDetails(accountId, callback){
	if(accountId){
		qbo.getAccount(accountId,function(error,response){
			if(error){
				callback({"error":error});
			}else{
				console.log("Account Details: "+(JSON.stringify(response)));
				callback(response.Account);
			}
		});
	}else{
		console.log("Account Id is mandatory to get Account Details");
		callback({"error":"Account Id is mandatory to get Account Details"});
	}
}

/**
 * @author SAIKIRAN VADLAKONDA
 * 
 * @param account - {Object} The persistent Account, including Id and SyncToken fields
 * @param callback - {Function} callback function to execute after success or failure
 * 
 * 
 */
function updateAccount(account, callback){
	if(account){
		qbo.updateAccount(account,function(error,response){
			if(error){
				callback({"error":error});
			}else{
				console.log("Account Details: "+(JSON.stringify(response)));
				callback({"success":response});
			}
		});
	}else{
		console.log("Account Id is mandatory to get Account Details");
		callback({"error":"Account Id is mandatory to get Account Details"});
	}
}



/**
 * @author V SAIKIRAN
 * 
 * @param accHolderName - {String} Name of the account holder
 * @param callback - {Function} callback function to execute after success or failure
 * 
 * @description
 * 
 * 
 */
function FindAccountDetailsByName(accHolderName, callback){
	if(accHolderName.constructor==String){
		qbo.findAccounts("where Name LIKE '%"+accHolderName+"%'",function(error,response){
			if(error){
				callback({"error":error});
			}else{
				console.log("Account Details: "+(JSON.stringify(response)));
				callback({"success":response});
			}
		});
	}else{
		console.log("Account Id is mandatory to get Account Details");
		callback({"error":"Account Id is mandatory to get Account Details"});
	}
}


/**
 * @description
 * The Vendor represents the seller from whom your company purchases any service or product.
 * 
 * @param vendorData - {Object} The unsaved vendor, to be persisted in QuickBooks
 * <ul>
 * <li>Title:Title of the person.</li>
 * <li>GivenName:Given name or first name of a person. </li>
 * <li>MiddleName:Middle name of the person. The person can have zero or more middle names.</li>
 * <li>FamilyName:Family name or the last name of the person.</li>
 * <li>Suffix:Suffix of the name. For example, Jr.</li>
 * <li>CompanyName:The name of the company associated with the person or organization.</li>
 * <li>DisplayName:The name of the person or organization as displayed.Constraints:Must be unique,Cannot be removed with sparse update</li>
 * <li>PrintOnCheckName:Name of the person or organization as printed on a check. If not provided, this is populated from DisplayName.</li>
 * <li>PrimaryPhone:{FreeFormNumber: Specifies the telephone number in free form.}</li>
 * <li>AlternatePhone:</li>
 * <li>Mobile:</li>
 * <li>Fax:</li>
 * <li>PrimaryEmailAddr:{Address:'An email address. The address format must follow the RFC 822 standard.'}</li>
 * <li>WebAddr:{URI:'string'}</li>
 * <li>BillAddr:</li>
 * <li>OtherContactInfo:</li>
 * <li>TaxIdentifier:The tax ID of the Person or Organization.</li>
 * <li>TermRef:{value:'Id of the Term'}</li>
 * <li>Balance:Specifies the open balance amount or the amount unpaid by the customer. For the create operation, this represents the opening balance for the customer. When returned in response to the query request it represents the current open balance (unpaid amount) for that customer.</li>
 * <li>AcctNum:Name or number of the account associated with this vendor.</li>
 * <li>Vendor1099:Boolean </li>
 * <li>CurrencyRef:{value:'A three letter string representing the ISO 4217 code for the currency'}</li>
 * <li>TaxReportingBasis:Optional</li>
 * <li>APAccountRef:Optional </li>
 * </ul>
 * 
 * Refer: https://developer.intuit.com/docs/api/accounting/Vendor
 * 
 */
function createVendor(vendor, callback){
	
	if((vendor.Title || vendor.GivenName || vendor.MiddleName || vendor.FamilyName) && vendor.DisplayName){
		qbo.createVendor(vendor, function(error, response){
			if(error){
				callback({"error":error});
			}else{
				//console.log("Vendor Created with: "+(JSON.stringify(response)));
				callback({"success":response});
			}
		});
	}else{
		console.log("Values are mandatory for Vendor Name and DisplayName");
		callback({"error":"Values are mandatory for Vendor/Supplier Name and DisplayName"});
	}
}

/**
 * 
 * @param vendor - {Object}
 * @param callback - {Function}
 */
function updateVendor(vendor, callback){
	if(vendor.Id && vendor.SyncToken){
		qbo.createVendor(vendor, function(error, response){
			if(error){
				callback({"error":error});
			}else{
				//console.log("Vendor Created with: "+(JSON.stringify(response)));
				callback({"success":response});
			}
		});
	}else{
		console.log("Id, SyncToken values are mandatory for Vendor updation.");
		callback({"error":"Values are mandatory for Vendor/Supplier Name and DisplayName"});
	}
}
/**
 * @refer
 * https://developer.intuit.com/docs/api/accounting/vendor
 * 
 * @param supplierData - {Object}
 * <ul>
 * <li></li>
 * <li></li>
 * <li></li>
 * <li></li>
 * <li></li>
 * <li></li>
 * <li></li>
 * </ul>
 * @param callback
 */
function createSupplier(supplierData, callback){
	createVendor(supplierData, callback);
}

/**
 * 
 * @param vendorId - {String} Vendor Id to retrieve
 * @param callback - {Function} callback function to execute after success or failure
 */
function getVendorDetails(vendorId, callback){
	if(vendorId.constructor==String){
		qbo.getVendor(vendorId, function(error, response){
			if(error){
				callback({"error":error});
			}else{
				console.log("Vendor Details: "+(JSON.stringify(response)));
				callback(response.Vendor);
			}
		});
	}else{
		console.log("Values are mandatory for Vendor Name and DisplayName");
		callback({"error":"Values are mandatory for Vendor/Supplier Name and DisplayName"});
	}
}

/**
 * 
 * @param supplierId - {String} Supplier Id to retrieve
 * @param callback - {Function} callback function to execute after success or failure
 */
function getSupplierDetails(supplierId, callback){
	if(supplierId.constructor==String){
		qbo.getVendor(supplierId, function(error, response){
			if(error){
				callback({"error":error});
			}else{
				console.log("Supplier Details: "+(JSON.stringify(response)));
				callback(response.Supplier);
			}
		});
	}else{
		console.log("Id is mandatory to get the details of Supplier");
		callback({"error":"Id is mandatory to get the details of Vendor/Supplier"});
	}
}

/**
 * @returns - {Object} Empty Object if no data found else Object with array.
 * 
 * @param supplierName - {String} Name of the Supplier/Vendor
 * @param callback - {Function} callback function to execute after success or failure
 */
function findSuppliersByName(supplierName, callback){
	if(supplierName.constructor==String){
		qbo.findVendors("where DisplayName LIKE '%"+supplierName+"%'", function(error, response){
			if(error){
				callback({"error":error});
			}else{
				console.log("Supplier Details: "+(JSON.stringify(response)));
				callback({"success":response});
			}
		});
	}else{
		console.log("Id is mandatory to get the details of Supplier");
		callback({"error":"Id is mandatory to get the details of Vendor/Supplier"});
	}
}



/**
 * @description
 * Item:
 *  An item is a thing that your company buys, sells, or re-sells, such as products and services. An item is shown as a line on an invoice or other sales form. 
 *  The Item.Type attribute, which specifies how the item is used, has one of the following values: Inventory or Service or NonInventory
 *  
 *  SAMPLE OBJECT
 *	{
 *	  "Item": {
 *	    "Name": "Office Supplies",
 *	    "Description": "This is the sales description.",
 *	    "Active": true,
 *	    "FullyQualifiedName": "Office Supplies",
 *	    "Taxable": true,
 *	    "UnitPrice": 25,
 *	    "Type": "Inventory",
 *	    "IncomeAccountRef": {
 *	      "value": "79",
 *	      "name": "Sales of Product Income"
 *	    },
 *	    "PurchaseDesc": "This is the purchasing description.",
 *	    "PurchaseCost": 35,
 *	    "ExpenseAccountRef": {
 *	      "value": "80",
 *	      "name": "Cost of Goods Sold"
 *	    },
 *	    "AssetAccountRef": {
 *	      "value": "81",
 *	      "name": "Inventory Asset"
 *	    },
 *	    "TrackQtyOnHand": true,
 *	    "QtyOnHand": 10,
 *	    "InvStartDate": "2013-02-19",
 *	    "domain": "QBO",
 *	    "sparse": false,
 *	    "Id": "37",
 *	    "SyncToken": "0",
 *	    "MetaData": {
 *	      "CreateTime": "2015-04-22T11:03:23-07:00",
 *	      "LastUpdatedTime": "2015-04-22T11:03:24-07:00"
 *	    }
 *	  },
 *	  "time": "2015-04-22T11:01:37.346-07:00"
 *	}
 * <br>
 *  
 *  @param itemData - {Object} Must containing the fields 
 *  <ul>
 *  <li>Name - {String}Name of the Item</li>
 *  <li> Type - {string}Accepted values Inventory, Service, NonInventory</li>
 *  <li>IncomeAccountRef- Required for Inventory and Service item types</li>
 *  <li>ExpenseAccountRef - Required for Inventory, NonInventory, and Service item type</li>
 *  <li>AssetAccountRef - Required for Inventory item types.</li>
 *  <li>InvStartDate - Required for Inventory type items.</li>
 *  <li>QtyOnHand - Required for Inventory type items.</li>
 *  </ul>  
 *  @param callback - {Function} callback function to execute after success or failure
 *  
 * */
function createItem(itemData, callback){
	if(itemData.Name && itemData.Type && (itemData.Type=="Inventory") && itemData.InvStartDate && itemData.QtyOnHand && itemData.AssetAccountRef){
		if(error){
			callback({"error":error});
		}else{
			console.log("Item Created with: "+(JSON.stringify(response)));
			callback({"success":response});
		}
	}else{
		console.log("Values are mandatory for Item Name and Item Type");
		callback({"error":"Values are mandatory for Item Name and Item Type"});
	}
}

function createService(itemData, callback){
	if(itemData.Name && itemData.Type && (itemData.Type!="Inventory")){
		qbo.createItem(itemData, function(error, response){
			if(error){
				callback({"error":error});
			}else{
				console.log("Service/NonInventoryItem Created with: "+(JSON.stringify(response)));
				callback({"success":response});
			}
		});
	}else{
		console.log("Values are mandatory for Service/NonInventoryItem Name");
		callback({"error":"Values are mandatory for Service/NonInventoryItem Name"});
	}
}
/**
 * 
 * @param itemData - {Object}
 * @param callback - {Function} callback function to execute after success or failure
 */
function createNonInventoryItem(itemData, callback){
	if(itemData.Name && itemData.Type && (itemData.Type!="Inventory")){
		createService(itemData, callback);
	}
}

/**
 * @param Id - {String} The Id of persistent Item
 * @param callback - {Function} callback function to execute after success or failure
 */
function getItemDetails(Id, callback){
	if(Id.constructor==String){
		qbo.getItem(Id, function(error ,response){
			if(error){
				callback({"error":error});
			}else{
				console.log("Item Details: "+(JSON.stringify(response)));
				callback(response.Item);
			}
		});
	}else{
		console.log("Item Id is mandatory to get Item Details");
		callback({"error":"Item Id(String) is mandatory to get Item Details"});
	}
}


/*
 * 
 * The category object
 * 
 * Item Category
 * Refer: https://developer.intuit.com/docs/api/accounting/Item
 * 
 * SAMPLE OBJECT
 *	{
 *	    "Item":
 *	    {//Item Category JSON structure starts from here
 *	        "Name":"Trees",
 *	        "Active":true,
 *	        "FullyQualifiedName":"Trees",
 *	        "Type":"Category",
 *	        "domain":"QBO",
 *	        "sparse":false,
 *	        "Id":"29",
 *	        "SyncToken":"0",
 *	        "MetaData":
 *	        {
 *	            "CreateTime":"2015-10-06T08:50:34-07:00",
 *	            "LastUpdatedTime":"2015-10-06T08:50:34-07:00"
 *	        }
 *	    },
 *	    "time":"2015-10-06T08:50:34.863-07:00"
 *	}
 * 
 * 
 * Currently we are unable provide this service.
 * */


/**
 * @description
 * Line [0..n]* - Individual line items of a transaction. Valid Line types include:
 * 					Item line: 
 * VendorRef*	- { name:string,  type:string,  value*:string}
 * APAccountRef*- { name:string,  type:string,  value*:string}
 * 
 * 
 * Refer: https://developer.intuit.com/docs/api/accounting/PurchaseOrder
 * 
 * 
 * Sample Object
 * {
 *    "Line": [{
 *       "Id": "1",
 *       "Amount": 25.0,
 *       "DetailType": "ItemBasedExpenseLineDetail",
 *       "ItemBasedExpenseLineDetail": {
 *           "CustomerRef": {
 *               "value": "3",
 *               "name": "Cool Cars"
 *           },
 *           "BillableStatus": "NotBillable",
 *           "ItemRef": {
 *               "value": "38",
 *               "name": "Garden Supplies"
 *           },
 *           "UnitPrice": 25,
 *           "Qty": 1,
 *           "TaxCodeRef": {
 *               "value": "NON"
 *           }
 *       }
 *   }],
 *   "VendorRef": {
 *       "value": "41",
 *       "name": "Hicks Hardware"
 *   },
 *   "APAccountRef": {
 *       "value": "33",
 *       "name": "Accounts Payable (A/P)"
 *   },
 *   "TotalAmt": 25.0
 * }
 * 
 * @param poData - {Object} JSON Object of Purchase Order,<br> Mandatory Fields
 * <ul>
 * <li>Line [0..n]* - Individual line items of a transaction. Valid Line types include:
 * 					Item line: 
 * 
 * <li>VendorRef*	- { name:string,  type:string,  value*:string}</li>
 * <li>APAccountRef*- { name:string,  type:string,  value*:string}</li>
 * </ul>
 * @param callback - {Function} callback function to execute after success or failure
 * 
 * */
function createPurchaseOrder(poData, callback){
	if(poData.Line.length>0 && poData.VendorRef && poData.VendorRef.value && poData.APAccountRef && poData.APAccountRef.value){
		qbo.createPurchaseOrder(poData, function(error, response){
			if(error){
				callback({"error":error});
			}else{
				console.log("Purchase Order Created with: "+(JSON.stringify(response)));
				callback({"success":response});
			}
		});
	}else{
		console.log("Values are mandatory for PO Line and PO VendorRef");
		callback({"error":"Values are mandatory for PO Line and PO VendorRef"});
	}
}


/**
 * @description 
 * Payment:
 *
 * A Payment entity records a payment in QuickBooks. The payment can be applied for a particular customer against multiple Invoices and Credit Memos. It can also be created without any Invoice or Credit Memo, by just specifying an amount.
 *   -A Payment can be updated as a full update or a sparse update.
 *   -A Payment can be linked to multiple Invoices and Credit Memos
 *   -A Payment can be created as unapplied to any Invoice or Credit Memo, in which case it is recorded as a credit.
 *   -If any element in any line needs to be updated, all the Lines of a Payment have to be provided. This is true for full or sparse update. Lines can be updated only ALL or NONE.
 *   -To remove all lines, send an empty Lines tag.
 *   -To remove some of the lines, send all the Lines that need to be present MINUS the lines that need to be removed.
 *   -To add some lines, send all existing and new Lines that need to be present.
 *   -The sequence in which the Lines are received is the sequence in which lines are preserved.
 *   
 *   Mandatory Fields:
 *    -CustomerRef
 *    
 *    
 *    
 *    
 * SAMPLE REQUEST WITH LINKED TRANSACTION
 * {
 *   "CustomerRef":
 *   {
 *       "value": "20",
 *       "name": "Red Rock Diner"
 *   },
 *   "TotalAmt": 55.00,
 *   "Line": [
 *   {
 *       "Amount": 55.00,
 *       "LinkedTxn": [
 *       {
 *           "TxnId": "69",
 *           "TxnType": "Invoice"
 *       }]
 *   }]
 * }
 *
 * SAMPLE REQUEST FOR UNAPPLIED PAYMENT
 * {
 *  "CustomerRef": {
 *    "value": "20"
 *  },
 *  "TotalAmt": 25.00
 * }
 * 
 * @param paymentData - {Object}
 * 
 * @param callback - {Function}
 * 
 * */ 
function createPayment(paymentData, callback){
	if(paymentData.CustomerRef && paymentData.CustomerRef.value){
		qbo.createPayment(paymentData, function(error, response){
			if(error){
				callback({"error":error});
			}else{
				console.log("Payment is Done with: "+(JSON.stringify(response)));
				callback({"success":response});
			}
		});
	}else{
		console.log("Values are mandatory for Payment Customer Ref");
		callback({"error":"Values are mandatory for Payment Customer Ref"});
	}
}



/**
 * @author V SAIKIRAN
 * @description
 * Payment method
 *  The PaymentMethod entity provides the method of payment for received goods. Delete is achieved by setting the Active attribute to false in an entity update request; thus, making it inactive. In this type of delete, the record is not permanently deleted, but is hidden for display purposes. References to inactive objects are left intact.
 *
 * SAMPLE OBJECT:
 * {
 *  "PaymentMethod": {
 *   "Name": "Diners Club",
 *   "Active": true,
 *   "Type": "CREDIT_CARD",
 *   "domain": "QBO",
 *   "sparse": false,
 *   "Id": "7",
 *   "SyncToken": "0",
 *   "MetaData": {
 *     "CreateTime": "2014-09-11T14:42:05-07:00",
 *     "LastUpdatedTime": "2014-09-11T14:42:05-07:00"
 *   }
 *  },
 *  "time": "2015-07-24T15:29:33.401-07:00"
 * }
 * 
 * 
 * Mandatory Fields:
 *   Name: String, maximum of 31 chars
 * @param paymentMethodData - {Object} JSON object must contain Name 
 * @param callback - {Function} function to execute after success or failure
 */

function createPaymentMethod(paymentMethodData, callback){
	if(paymentMethodData.Name){
		qbo.createPaymentMethod(paymentMethodData, function(error, response){
			if(error){
				callback({"error":error});
			}else{
				console.log("Payment method is Created with: "+(JSON.stringify(response)));
				callback({"success":response});
			}
		});
	}else{
		console.log("Values are mandatory for Payment method Name");
		callback({"error":"Values are mandatory for Payment method Name"});
	}
}


/**
 * 
 * @description
 * Bill
 * A Bill entity is an AP transaction representing a request-for-payment from a third party for goods/services rendered and/or received.
 * 
 * @param bill - {Object}
 * Mandatory Fields
 * <ul>
 * <li>VendorRef</li>
 * <li>List</li>
 * </ul>
 * 
 * @param callback - {Function} function to execute after success or failure
 * 
 * 
 */
function createBill(bill, callback){
	if(bill.VendorRef && bill.VendorRef.value && bill.Line && bill.Line.length>0){
		qbo.createBill(bill, function(error ,response){
			if(error){
				callback({"error":error});
			}else{
				console.log("Bill is Created with: "+(JSON.stringify(response)));
				callback({"success":response});
			}
		});
	}else{
		console.log("Vendor and Line Items are mandatory To generate Bill");
		callback({"error":"Vendor and Line Items are mandatory To generate Bill"});
	}
	
}

/**
 * @description
 * To Get Bill Details By passing Bill Id.
 * @param Id - {String} The Id of persistent Bill
 * @param callback - {Function} function to execute after success or failure
 */
function getBill(Id, callback){
	if(Id.constructor==String && Id){
		qbo.getBill(Id, function(error, response){
			if(error){
				callback({"error":error});
			}else{
				console.log("Bill Details: "+(JSON.stringify(response)));
				callback({"success":response});
			}
		});
	}else{
		console.log("Bill Id is mandatory To retrieve Bill");
		callback({"error":"Bill Id is mandatory To retrieve Bill"});
	}
	
}

/**
 * @description
 * A BillPayment entity represents the financial transaction of payment of bills that the business owner receives from a vendor for goods or services purchased from the vendor. QuickBooks Online supports bill payments through a credit card or a checking account.
 * BillPayment.TotalAmt is the total amount associated with this payment. This includes the total of all the payments from the payment line details. If TotalAmt is greater than the total on the lines being paid, the overpayment is treated as a credit and exposed as such on the QuickBooks UI. The total amount cannot be negative.
 * @param bill - {Object} Bill Object, having below structure
 * <ul>
 * <li>TxnDate : Date of the Transaction</li>
 * <li>VendorRef: Mandatory, {Value: 'Id of the Vendor', Name: 'Vendor Name'}</li>
 * <li>PayType : 'Check' or '</li>
 * </ul>
 * @param callback - {Function}
 */
function createBillPayment(bill, callback){//pending
	//check for PayType credit card or Check payment, then assign appropriate value to PayType.
	//Need to discuss
	
}


/**
 * @description 
 * A customer is a consumer of the service or product that your business offers. 
 * The Customer object allows you to categorize customers according to your business requirements.
 * You must first create a customer and then create a job referencing that customer as a parent with the ParentRef attribute. Some areas a sub-customer/job can be used include
 * 
 * @param customer - {Object}
 * @param callback - {Function}
 * @rules
 * <ul>
 * <li> The DisplayName, GivenName, MiddleName, FamilyName, and PrintOnCheckName attributes must not contain a colon,":".</li>
 * <li> The DisplayName attribute must be unique across all other customers, employees, vendors, and other names.</li>
 * <li>The PrimaryEmailAddress attribute must contain an at sign, "@," and dot, ".".</li>
 * <li>Nested customer objects can be used to define sub-customers, jobs, or a combination of both, under a parent.</li>
 * <li>Up to four levels of nesting can be defined under a top-level customer object.</li>
 * <li>The Job attribute defines whether the object is a top-level customer or nested sub-customer/job.</li>
 * <li>Either the DisplayName attribute or at least one of Title, GivenName, MiddleName, FamilyName, Suffix, or FullyQualifiedName attributes are required during create.</li>
 * </ul>
 * 
 * @see <a href='https://developer.intuit.com/docs/api/accounting/Customer'>Customer</a>
 * 
 * 
 */
function createCustomer(customer, callback){
	if(customer.DisplayName || customer.Title || customer.GivenName || customer.MiddleName || customer.FamilyName){
		qbo.createCustomer(customer, function(error, response){
			if(error){
				callback({"error":error});
			}else{
				console.log("Customer created with Details: "+(JSON.stringify(response)));
				callback({"success":response});
			}
		});
	}else{
		console.log("Either the DisplayName attribute or at least one of Title, GivenName, MiddleName, FamilyName, Suffix, or FullyQualifiedName attributes are required during create.");
		callback({"error":"Either the DisplayName attribute or at least one of Title, GivenName, MiddleName, FamilyName, Suffix, or FullyQualifiedName attributes are required during create."});
	}
	
}

/**
 * @description 
 * To update customer details.
 * @rules
 * - Id and SyncTokens are mandatory to update.
 * @param customer - {Object} 
 * @param callback - {Function}
 * @see <a href='https://developer.intuit.com/docs/api/accounting/Customer'>Customer</a>
 */
function updateCustomer(customer, callback){
	if(customer.Id && customer.SyncToken){
		qbo.updateCustomer(customer, function(error, response){
			if(error){
				callback({"error":error});
			}else{
				console.log("Customer created with Details: "+(JSON.stringify(response)));
				callback({"success":response});
			}
		});
	}else{
		console.log("Id and SyncTokens are mandatory to update.");
		callback({"error":"Id and SyncTokens are mandatory to update."});
	}
}

/**
 * @description - To get Customer details using Id.
 * @param Id - {String} customer Id.
 * @param callback - {Function}
 * @see <a href='https://developer.intuit.com/docs/api/accounting/Customer'>Customer</a>
 */
function getCustomerById(Id, callback){
	if(Id.constructor==String){
		qbo.getCustomer(Id, function(error, response){
			if(error){
				callback({"error":error});
			}else{
				console.log("Customer Details: "+(JSON.stringify(response)));
				callback({"success":response});
			}
		});
	}else{
		console.log("Id is mandatory to update.");
		callback({"error":"Id is mandatory to update."});
	}
}

/**
 * @description
 * - To retrieve A Customer By using Name
 * @param Name - {String} Name of the Customer
 * @param callback - {Function}
 * @see <a href='https://developer.intuit.com/docs/api/accounting/Customer'>Customer</a>
 */
function getCustomerByName(Name, callback){
	if(Name && Name.constructor==String){
		qbo.findCustomers("WHERE DisplayName LIKE '%"+Name+"%'", function(error, response){
			if(error){
				callback({"error":error});
			}else{
				console.log("Customers By Name: "+(JSON.stringify(response)));
				callback({"success":response});
			}
		});
	}else{
		console.log("Name in String format is mandatory to find Customer.");
		callback({"error":"Name in String format is mandatory to find Customer"});
	}
}

/**
 * @description
 * An Invoice represents a sales form where the customer pays for a product or service later.
 * 
 * @param invoice - {Object}
 * <ul>
 * <li>An invoice must have at least one Line that describes an item.</li>
 * <li>An invoice must have CustomerRef populated.</li>
 * <li>The DocNumber attribute is populated automatically by the data service if not supplied.</li>
 * <li>If ShipAddr, BillAddr, or both are not provided, the appropriate customer address from Customer is used to fill those values.</li>
 * <li>DocNumber, if supplied, must be unique.</li>
 * </ul>
 * @param callback - {Function}
 * @see <a href='https://developer.intuit.com/docs/api/accounting/Invoice'>Invoice</a>
 */
function createInvoice(invoice, callback){
	if(invoice.CustomerRef && invoice.CustomerRef.value && invoice.Line && invoice.Line.length>0){
		qbo.createInvoice(invoice, function(error, response){
			if(error){
				callback({"error":error});
			}else{
				console.log("Invoice Created with: "+(JSON.stringify(response)));
				callback({"success":response});
			}
		});
	}else{
		console.log("Line and Customer ref Values are mandatory for Invoice");
		callback({"error":"Line and Customer ref Values are mandatory for Invoice"});
	}
}

/**
 * 
 * @param  {string} Id - The Id of persistent Invoice
 * @param  {function} callback - Callback function which is called with any error and the Invoice PDF
 */
function sendInvoicePdf(Id, callback) {
	if(Id && Id.constructor==String && callback && callback.constructor==Function){
		qbo.sendInvoicePdf(Id, function(error, response){
			if(error){
				callback({"error":error});
			}else{
				console.log("Invoice Created with: "+(JSON.stringify(response)));
				callback({"success":response});
			}
		});
	}else{
		console.log("Id is mandatory to send Invoice");
		callback({"error":"Id is mandatory to send Invoice"});
	}
}



/**
 * 
 * @param  Id - {string} The Id of persistent Invoice
 * @param  sendTo - {string} optional email address to send the PDF to. If not provided, address supplied in Invoice.BillEmail.EmailAddress will be used
 * @param  callback - {function} Callback function which is called with any error and the Invoice PDF
 */
function sendInvoicePdfToOthers(Id, sendTo, callback){
	if(Id && Id.constructor==String && callback && callback.constructor==Function && sendTo && sendTo.constructor==String){
		qbo.sendInvoicePdf(Id, sendTo, function(error, response){
			if(error){
				callback({"error":error});
			}else{
				console.log("Invoice Created with: "+(JSON.stringify(response)));
				callback({"success":response});
			}
		});
	}else{
		console.log("Id and sender email are mandatory to send Invoice");
		callback({"error":"Id and sender email are mandatory to send Invoice"});
	}
	
}

/**
 * 
 * @param Id
 * @param callback
 */
function getInvoicePdf(Id, callback){
	if(Id && Id.constructor==String){
		qbo.getInvoicePdf(Id, function(err, buff){
			if(buff && buff.length>0){
				var fs=require('fs');
				fs.writeFile("invoice.pdf", buff);
				//callback()
			}
			
		});
	}
}


/**
 * @description
 * Tax Agency is an entity that is associated with a tax rate and identifies the agency to which that tax rate applies, that is, the entity that collects those taxes.
 * 
 * 
 * @param taxAgency - {Object} 
 * Properties
 * <ul>
 * <li>DisplayName			: (Mandatory)Text, max 100 chars, Name of the Agency</li>
 * <li>TaxRegistrationNumber: (Mandatory)Text, Registration number for the agency</li>
 * <li>TaxTrackedOnPurchases: (Mandatory)Boolean, Denotes whether this tax agency is used to track tax on purchases</li>
 * <li>TaxTrackedOnSales	: (Mandatory)Boolean, Denotes whether this tax agency is used to track tax on sales</li>
 * </ul>
 * @param callback  - {Function} 
 */
function createTaxAgency(taxAgency, callback){
	if(taxAgency.DisplayName && taxAgency.DisplayName.constructor==String ){
		qbo.createTaxService(taxAgency, function(error, response){
			if(error){
				callback({"error":error});
			}else{
				console.log("Tax Agency Created with: "+(JSON.stringify(response)));
				callback({"success":response});
			}
		});
	}else{
		console.log("DisplayName is mandatory to create tax agency");
		callback({"error":"DisplayName is mandatory to create tax agency"});
	}
	
}

/**
 * @description
 * A TaxRate object represents rate applied to calculate tax liability. Use the TaxService entity to create a taxrate.
 * We cannot update Tax Rate from API
 *  
 * @param taxRate - {Object}
 * <ul> 
 * <li><b>Name</b>			: (Mandatory) Text, max 100, User recognizable name for the tax rate.</li>
 * <li>Description			: Text, max 100, User entered description for the tax rate.</li>
 * <li>RateValue			: Text, Value of the tax rate.</li>
 * <li>AgencyRef			: Text, ID of the Agency.</li>
 * <li>TaxReturnLineRef		: Text, ID of the tax return line.</li>
 * <li>SpecialTaxType		: Text, Special tax type to handle zero rate taxes. Used with VAT registered Businesses who receive goods/services (acquisitions) from other EU countries, will need to calculate the VAT due, but not paid, on these acquisitions. The rate of VAT payable is the same that would have been paid if the goods had been supplied by a UK supplier.</li>
 * <li>DisplayType			: Text, TaxRate DisplayType enum which acts as display config.</li>
 * <li>EffectiveTaxRate		: Text, List of EffectiveTaxRate. An EffectiveTaxRate is used to know which taxrate is applicable on any date.</li>
 * </ul>
 * 
 * 
 * @param callback
 */
function createTaxRate(taxRate, callback){
	if(taxRate.Name && taxRate.Name.constructor==String){
		qbo.createTaxService(taxRate, function(error, response){
			if(error){
				callback({"error":error});
			}else{
				console.log("Tax Agency Created with: "+(JSON.stringify(response)));
				callback({"success":response});
			}
		});
	}else{
		console.log("Name is mandatory to create tax rate");
		callback({"error":"Name is mandatory to create tax rate"});
	}
	
}

/**
 * @description
 * This is to create Actual Tax, to create tax we need Tax Rate and Tax Agency. And these will be used while generating either invoice or purchase order<br>
 * A tax code is used to track the taxable or non-taxable status of products, services, and customers. You can assign a sales tax code to each of your products, services, and customers based on their taxable or non-taxable status. You can then use these codes to generate reports that provide information to the tax agencies about the taxable or non-taxable status of certain sales.<br>
 * 
 * The TaxService endpoint allows you to perform the following actions:<br>
 * -Create a new tax code and specify a list of existing tax rates to be associated to that tax code. To retrieve a list of existing tax codes, query the TaxCode endpoint.<br>
 * -Create a new tax rate dynamically. To retrieve a list of existing tax rates, query the TaxRate endpoint.<br>
 * Tax agency entities on tax rates created via the TaxService endpoint are referenced by id only. That is, you cannot create new tax agencies via the TaxService endpoint.<br>
 * 
 * @see: https://developer.intuit.com/docs/api/accounting/TaxService
 * 
 * @param groupTax - {Object} 
 * <ul>
 * <li>TaxCode:</li>
 * <li>TaxCodeId:</li>
 * <li>TaxRateDetails : Array Of Objects
 * 	<ul>
 * 	<li>TaxRateName:'Name of the Tax'</li>
 * 	<li>RateValue:'12.23'</li>
 * 	<li>TaxAgencyId:'1'</li>
 * 	<li>TaxApplicableOn:'Sales' or 'Purchase'</li>
 *  </ul>
 * </li>
 * </ul>
 * @param callback
 */
function createGroupTax(groupTax, callback){
	if(groupTax.Name && groupTax.Name.constructor==String){
		qbo.createTaxService(groupTax, function(error, response){
			if(error){
				callback({"error":error});
			}else{
				console.log("Tax Agency Created with: "+(JSON.stringify(response)));
				callback({"success":response});
			}
		});
	}else{
		console.log("Name is mandatory to create tax rate");
		callback({"error":"Name is mandatory to create tax rate"});
	}
	
}

/**
 * 
 * To create a custom tax 
 * 1) We create Tax Agency
 * 2) Create Tax Rate
 * 
 * @param tax
 * @param callback
 */
function createCustomTax(tax, callback){//pending
	
}
/*
 * qbo.findTaxAgencies  qbo.findTaxCodes     qbo.findTaxRates
 * 
 * qbo.createTaxAgency   qbo.createTaxService
 * 
 * TaxAgency
 * TaxCode
 * TaxRate
 * TaxService
 * 
 * */

/**
 * @description
 * 
 * @param empData - {Object} Employee data<br>
 * <ul>
 * <li>Organization:True if the entity represents an organization; otherwise, false indicates the entity represents a person.</li>
 * <li>Title: Title of the person. Not supported when QuickBooks Payroll is enabled.</li>
 * <li>GivenName: Given name or first name of a person.</li>
 * <li>MiddleName: Middle name of the person. The person can have zero or more middle names. </li>
 * <li>FamilyName: Family name or the last name of the person.</li>
 * <li>DisplayName: The name of the person or organization as displayed. Default Value: If not given in the Create request, a default is constructed with the following format: Title, GivenName, MiddleName, FamilyName, and Suffix. If a user clears out this value, it is repopulated by the service with this default value.When QuickBooks Payroll is enabled, read-only and a concatenation of GivenName MiddleName FamilyName. </li>
 * <li>PrintOnCheckName: Name of the person or organization as printed on a check. If not provided, this is populated from DisplayName.Constraints:Cannot be removed with sparse update.Not supported when QuickBooks Payroll is enabled.</li>
 * <li>Active: If true, this entity is currently enabled for use by QuickBooks.</li>
 * <li>PrimaryPhone: Primary phone number, FreeFormNumber:-Specifies the telephone number in free form. </li>
 * <li>Mobile: Mobile phone number, FreeFormNumber:-Specifies the telephone number in free form. </li>
 * <li>PrimaryEmailAddr: Address-An email address. The address format must follow the RFC 822 standard. </li>
 * <li>EmployeeNumber: Specifies the ID number of the employee in the employer's directory.</li>
 * <li>PrimaryAddr: Represents the physical street address for this employee.</li>
 * <li>BirthDate: Birth date of the employee</li>
 * <li> Gender: Male or Female</li>
 * <li>HiredDate: Hire date of the employee.</li>
 * <li>ReleasedDate: Release date of the employee. YYYY-MM-DD</li>
 * </ul>
 * @param callback
 */
function createEmployee(empData, callback){
	if(empData.GivenName || empData.MiddleName || empData.FamilyName || empData.DisplayName){
		qbo.createEmployee(empData, function(error, response){
			if(error){
				callback({"error":error});
			}else{
				console.log("Employee Created with: "+(JSON.stringify(response)));
				callback({"success":response});
			}
		});
	}else{
		console.log("Name is mandatory to create tax rate");
		callback({"error":"Name is mandatory to create tax rate"});
	}
	
}



/**
 * 
 * @param terms - {Object} term<br>
 * <ul>
 * <li>Name : Required, User recognizable name for the term</li>
 * <li>DiscountPercent: Decimal,Discount percentage available against an amount if paid within the days specified by DiscountDays.</li>
 * <li>DueDays: Number of days from delivery of goods or services until the payment is due.</li>
 * <li>DiscountDays: Discount applies if paid within this number of days.</li>
 * <li>Active: true</li>
 * <li>Type: Type of the Sales Term. Valid values are STANDARD and DATE_DRIVEN. </li>
 * </ul>
 * @param callback - {Function} callback function <br>
 * {@link: https://developer.intuit.com/docs/api/accounting/Term}
 */
function createSalesTerms(terms, callback){
	if(terms.Name && terms.Name.constructor==String){
		qbo.createTerm(terms, function(error, response){
			if(error){
				callback({"error":error});
			}else{
				console.log("Sales Term is Created with: "+(JSON.stringify(response)));
				callback({"success":response});
			}
		});
	}else{
		console.log("Name is mandatory to create Sales Term");
		callback({"error":"Name is mandatory to create Sales Term"});
	}
}

/**
 * @description
 * We can make a Term Active state to Inactive State using Active true to false,
 * Can update the Discount rate and days
 * @param term - {Object} 
 * @param callback - {Function}
 */
function updateSalesTerm(term, callback){
	if(term.Name && term.Name.constructor==String && term.Id && term.SyncToken){
		qbo.updateTerm(term, function(error, response){
			if(error){
				callback({"error":error});
			}else{
				console.log("Sales Term is Created with: "+(JSON.stringify(response)));
				callback({"success":response});
			}
		});
	}else{
		console.log("Name is mandatory to update Sales Term");
		callback({"error":"Name is mandatory to update Sales Term"});
	}
}


/**
 * 
 * @param attachmentNote - {Object} Note as attachment for Any Entity like Invoice, PO etc.
 * <ul>
 * <li>AttachableRef : Array of Objects
 * <ul>
 * <li><b>EntityRef</b>: {Value:'Id of the Entity', Name: 'Name of the Entity'}</li>
 * <li><b>LineInfo</b>: For transaction objects, used to reference a transaction detail line.</li>
 * <li><b>IncludeOnSend</b>: Used when EntityRef.type references a transaction object. This field indicates whether or not the attachment is sent with the transaction when Save and Send button is clicked in the QuickBooks UI or when the Send endpoint (send email) is invoked for the object.</li>
 * <li><b>Inactive</b>: Indicates whether or not to include references to hidden entities when filtering. When set to true , hidden references are returned in the result set.For filtering results, it works with AttachableRef.EntityRef.Type , AttachableRef.EntityRef.Value and AttachableRef.NoRefOnly filters in combination.</li>
 * </ul>
 * </li>
 * <li>FileName: FileName of the attachment.</li>
 * <li>Note: This note is either related to the attachment specified by FileName or is a standalone note.</li>
 * </ul>
 * @param callback
 */
function createAttachmentNote(attachmentNote, callback){
	
}


/**
 * @description
 * SalesReceipt represents the sales receipt that is given to a customer. A sales receipt is similar to an invoice. However, for a sales receipt, payment is received as part of the sale of goods and services. The sales receipt specifies a deposit account where the customer deposits the payment. If the deposit account is not specified, the payment type is classified as Undeposited Account.
 * <br>
 * {@link https://developer.intuit.com/docs/api/accounting/SalesReceipt}
 * 
 * @param salesRecpt - {Object} JSON Object
 * <ul>
 * <li>DocNumber: Reference number for the transaction. If not explicitely provided at create time, this field is populated based on the setting of Preferences:CustomTxnNumber</li>
 * <li>TxnDate: The date entered by the user when this transaction occurred.</li>
 * <li>DepartmentRef: {value:'Id of the Department'}</li>
 * <li>PrivateNote: User entered, organization-private note about the transaction. This note does not appear on the invoice to the customer. This field maps to the Memo field on the Invoice form.</li>
 * <li>LinkedTxn: [{TxnId:'', TxnType:'', TxnLineId:''}]</li>
 * <li>Line: </li>
 * <li>TxnTaxDetail: {TxnTaxCodeRef:{value:'Id of the Tax'}, TotalTax:''}</li>
 * <li>CustomerRef: Reference to a Customer or job. {value:'Id of the Customer or Job'}</li>
 * <li>BillAddr: Bill-to address of the Invoice. If BillAddris not specified, and a default Customer:BillingAddr is specified in QuickBooks for this customer, the default bill-to address is used by QuickBooks.</li>
 * <li>ShipAddr: Identifies the address where the goods must be shipped. If ShipAddris not specified, and a default Customer:ShippingAddr is specified in QuickBooks for this customer, the default ship-to address will be used by QuickBooks. </li>
 * <li>ShipMethodRef: Reference to the ShipMethod associated with the transaction. There is no shipping method list. Reference resolves to a string.</li>
 * <li>ShipDate:  date:string </li>
 * <li>TotalAmt: BigDecimal, Indicates the total amount of the transaction. This includes the total of all the charges, allowances, and taxes. Calculated by QuickBooks business logic; any value you supply is over-written by QuickBooks. </li>
 * <li>PrintStatus: Printing status of the invoice.Valid values: NotSet, NeedToPrint, PrintComplete . </li>
 * <li>EmailStatus: EMail status of the receipt.Valid values: NotSet, NeedToSend, EmailSent . </li>
 * <li>BillEmail: Identifies the e-mail address where the invoice is sent. If EmailStatus=NeedToSend, BillEmailis a required input. </li>
 * <li>Balance: The balance reflecting any payments made against the transaction. Initially set to the value of TotalAmt. A Balance of 0 indicates the invoice is fully paid. Calculated by QuickBooks business logic; any value you supply is over-written by QuickBooks.</li>
 * <li>PaymentMethodRef: Reference Id to the PaymentMethod.{value:'id of the payment method'}</li>
 * <li>PaymentRefNum: The reference number for the payment received. For example,  Check # for a check, envelope # for a cash donation</li>
 * <li>DepositToAccountRef: Asset account where the payment money is deposited. If you do not specify this account, payment is applied to the Undeposited Funds account. {value: 'id of the account'}</li>
 * </ul>
 * @param callback
 */
function createSalesReciept(salesRecpt, callback){
	if(salesRecpt.Line && salesRecpt.Line.length>0){
		qbo.createSalesReciept(salesRecpt, function(error, response){
			if(error){
				callback({"error":error});
			}else{
				console.log("Sales Reciept is Created with: "+(JSON.stringify(response)));
				callback({"success":response});
			}
		});
	}else{
		console.log("Some fields are mandatory to create Sales Reciept");
		callback({"error":"Some fields are mandatory to create Sales Reciept"});
	}
}


/**
 * @description
 * The Vendor Credit entity is an accounts payable transaction that represents a refund or credit of payment for goods or services. It is a credit that a vendor owes you for various reasons such as overpaid bill, returned merchandise, or other reasons.
 * <br>
 * @param vendorCredit - {Object}<br>
 * <ul>
 * <li>DocNumber:Reference number for the transaction.</li>
 * <li> TxnDate:The date entered by the user when this transaction occurred. </li>
 * <li>Line:Either ItemBasedLines or AccountBasedLines[{DetailType:ItemBasedExpenseLineDetail}]</li>
 * <li>VendorRef:The vendor reference for this transaction.{name:'name of the vendor', value:'Id of the vendor'}<br> If Line Items are Billable, then we have to provide Customer Details</li>
 * <li>APAccountRef:Specifies which AP account to which the bill is credited. Many/most small businesses have a single AP account, so the account can be implied. When specified, the account must be a Liability account, and further, the sub-type must be of type Payables.We strongly recommend that the AP Account be explicitly specified in all cases as companies that have more then one AP account will encounter unexpected errors when relating transactions to each other.<br>{name:'name of the account', value:'Id of the Account'} </li>
 * <li>TotalAmt:Indicates the total amount of the transaction. This includes the total of all the charges, allowances, and taxes. Calculated by QuickBooks business logic; any value you supply is over-written by QuickBooks.</li>
 * </ul>
 * @param callback - {Function} callback to execute
 * <br>
 * @refer https://developer.intuit.com/docs/api/accounting/VendorCredit
 */
function createVendorCredit(vendorCredit, callback){
	if(vendorCredit.VendorRef && 
			vendorCredit.VendorRef.value && 
			vendorCredit.VendorRef.value.length>0 &&
			vendorCredit.Line &&
			vendorCredit.Line.length>0){
		qbo.createVendorCredit(vendorCredit, function(error, response){
			if(error){
				callback({"error":error});
			}else{
				console.log("Vendor is Credited with: "+(JSON.stringify(response)));
				callback({"success":response});
			}
		});
	}else{
		console.log("Some fields are mandatory to credite to Vendor");
		callback({"error":"Some fields are mandatory to credite to Vendor"});
	}
}



/**
 * @description
 * The CreditMemo is a financial transaction representing a refund or credit of payment or part of a payment for goods or services that have been sold.
 * 
 * @refer
 * https://developer.intuit.com/docs/api/accounting/CreditMemo
 * 
 * @param crMemo - {Object}
 * <ul>
 * <li>DocNumber:Reference number for the transaction</li>
 * <li>TxnDate:The date entered by the user when this transaction occurred. </li>
 * <li>Line : minimum 1 sales item line required</li>
 * <li>CustomerRef:Reference to a Customer or job.</li>
 * <li>CustomerMemo:User-entered message to the customer; this message is visible to end user on their transactions. </li>
 * <li>SalesTermRef:Reference to the sales term associated with the transaction. {value:'Id of the Sales Term'}</li>
 * <li>BillAddr:Bill-to address of the credit memo. If BillAddris not specified, and a default Customer:BillingAddr is specified in QuickBooks for this customer, the default bill-to address is used by QuickBooks. </li>
 * <li>ShipAddr:Identifies the address where the goods must be shipped. If ShipAddris not specified, and a default Customer:ShippingAddr is specified in QuickBooks for this customer, the default ship-to address will be used by QuickBooks. </li>
 * <li>BillEmail:Identifies the e-mail address where the invoice is sent. If EmailStatus=NeedToSend, BillEmailis a required input. {Address:'An email address. The address format must follow the RFC 822 standard.'}</li>  
 * </ul>
 * @param callback - {Function}
 */
function creditMemo(crMemo, callback){
	if(crMemo.Line && crMemo.Line.length>0 && crMemo.CustomerRef){
		qbo.createCreditMemo(crMemo, function(error, response){
			if(error){
				callback({"error":error});
			}else{
				console.log("Vendor is Credited with: "+(JSON.stringify(response)));
				callback({"success":response});
			}
		});
	}else{
		console.log("Some fields are mandatory to credit to Vendor");
		callback({"error":"Some fields are mandatory to credit to Vendor"});
	}
}


/**
 * @description
 * <b>Refund Receipt</b>-
 * RefundReceipt represents a refund to the customer for a product or service that was given.<br>
 * Rules<br>
 * <ul>
 * <li>A RefundReceipt must have at least one line that describes an item.</li>
 * <li>A RefundReceipt must have a DepositToAccountRef.</li>
 * <li>If billing address is not provided, the customer address is used to fill those values.</li>
 * <li>CustomSalesTax cannot be used as TxnTaxCodeRef.</li>
 * </ul>
 * 
 * @refer https://developer.intuit.com/docs/api/accounting/RefundReceipt.
 * 
 * @param refundRcpt - {Object}
 * <ul>
 * <li>DocNumber:Reference number for the transaction</li>
 * <li>TxnDate:The date entered by the user when this transaction occurred.</li>
 * <li>DepartmentRef:{value:'Id of the Department'}</li>
 * <li>Line:Individual line items of a transaction. Valid Line types include:Sales item line: </li>
 * <li>TxnTaxDetail:{ TxnTaxCodeRef:{value:'Id of the TaxCode'}, TotalTax:, TaxLine:[]}</li>
 * <li>CustomerRef:{value:'Id of the Customer Object'}</li>
 * <li>CustomerMemo:User-entered message to the customer; this message is visible to end user on their transactions.{value:'User Entered Data'}</li>
 * <li>BillAddr:Bill-to address of the Invoice. If BillAddris not specified, and a default Customer:BillingAddr is specified in QuickBooks for this customer, the default bill-to address is used by QuickBooks. </li>
 * <li>DepositToAccountRef:Asset account where the payment money is deposited. If you do not specify this account, payment is applied to the Undeposited Funds account.{value:'Id of the Account'}</li>
 * </ul>
 * 
 * @param callback - {Function} callback function.
 */
function createRefundReciept(refundRcpt, callback){
	if(refundRcpt.Line && 
			refundRcpt.Line.length>0 &&
			refundRcpt.DepositToAccountRef &&
			refundRcpt.DepositToAccountRef.value &&
			refundRcpt.DepositToAccountRef.value.length>0){
		qbo.createRefunReciept(refundRcpt, function(error, response){
			if(error){
				callback({"error":error});
			}else{
				console.log("Refund Reciept is Credited with: "+(JSON.stringify(response)));
				callback({"success":response});
			}
		});
	}else{
		console.log("Some fields are mandatory to generate Refund Reciept");
		callback({"error":"Some fields are mandatory to generate Refund Reciept"});
	}
}


/**
 * @description
 * Rules<br>
 * Always Need to send Id, SyncToken, BillEmail,DepositToAccountRef, Line with Same Ids, CustomerRef
 * 
 * @param refundRct - {Object}
 * @param callback - {Function}
 */
function updateRefundReciept(refundRct, callback){
	if(refundRct.Id && 
			refundRct.SyncToken &&
			refundRct.DepositToAccountRef &&
			refundRct.DepositToAccountRef.value &&
			refundRct.Line && refundRct.Line.length>0){
		qbo.updateRefundReceipt(refundRct, function(error, response){
			if(error){
				callback({"error":error});
			}else{
				console.log("Refund Reciept is Updated with: "+(JSON.stringify(response)));
				callback({"success":response});
			}
		});
	}else{
		console.log("Some fields are mandatory to update Refund Reciept");
		callback({"error":"Some fields are mandatory to update Refund Reciept"});
	}
}


/**
 * @description
 * Estimate:<br>
 * The Estimate represents a proposal for a financial transaction from a business to a customer for goods or services proposed to be sold, including proposed pricing.
 * 
 * @refer 
 * https://developer.intuit.com/docs/api/accounting/Estimate
 * 
 * @param estimation - {Object}
 * <ul>
 * <li>DocNumber:Reference number for the transaction.</li>
 * <li>TxnDate:The date entered by the user when this transaction occurred.</li>
 * <li>DepartmentRef:{value:'Id of the Department'}</li>
 * <li>Line:[] Individual line items of a transaction.SalesItemLineDetail</li>
 * <li>TxnTaxDetail:{TxnTaxCodeRef:{value:'Id of the TaxCode'}}</li>
 * <li>CustomerRef:Required, Reference to a Customer or job.{value:'Id of the Customer'}</li>
 * <li>CustomerMemo:User-entered message to the customer; this message is visible to end user on their transactions.</li>
 * <li>SalesTermRef:Reference to the sales term associated with the transaction.</li>
 * <li>BillEmail:{Address:'An email address.'}</li>
 * <li>ExpirationDate:Date by which estimate must be accepted before invalidation.</li>
 * <li>AcceptedBy:Name of customer who accepted the estimate.</li>
 * <li>AcceptedDate:Date estimate was accepted.</li>
 * </ul>
 * @param callback - {Function} callback function to execute
 * @see After creating Estimate, send estimate using sendEstimatePdf API call.
 */
function createEstimate(estimation, callback){
	if(estimation.Line && 
			estimation.Line.length>0 &&
			estimation.CustomerRef &&
			estimation.CustomerRef.value &&
			estimation.CustomerRef.value.length>0){
		qbo.createEstimation(estimation, function(error, response){
			if(error){
				callback({"error":error});
			}else{
				console.log("Estimation is created : "+(JSON.stringify(response)));
				callback({"success":response});
			}
		});
	}else{
		console.log("Some fields are mandatory to create Estimation");
		callback({"error":"Some fields are mandatory to create Estimation"});
	}
}






/**
 * @description
 * Transfer<br>
 * -A Transfer represents a transaction where funds are moved between two accounts from the company's QuickBooks chart of accounts.<br>
 * Rule<br>
 * A transfer must have FromAccountRef, ToAccountRef, and Amount attributes.
 * @refer https://developer.intuit.com/docs/api/accounting/Transfer
 * @param transactionData - {Object}
 * <ul>
 * <li>FromAccountRef:Identifies the asset account from which funds are transfered.{value:'Id of the Account'}</li>
 * <li>ToAccountRef:Identifies the asset account to which funds are transfered.{value:'Id of the Account'}</li>
 * <li>Amount:Indicates the total amount of the transaction.</li>
 * <li></li>
 * <li></li>
 * </ul>
 * @param callback
 */
function transferFunds(transactionData, callback){
	
}





/**
 * @description
 * <b>Journal Entry</b><br>
 * Journal Entry is a transaction in which:<br>
 * -There are at least two parts\97a Debit and a Credit\97called distribution lines.<br>
 * -Each distribution line has an account from the Chart of Accounts.<br>
 * -The total of the Debit column equals the total of the Credit column.<br>
 * When you record a transaction with Journal Entry, the QBO UI labels the transaction as JRNL in a register and General Journal on reports that list transactions.
 * @param journalEntry - {Object}
 * <ul>
 * <li>Adjustment:Boolean,Indicates the total amount of the transaction. This includes the total of all the charges, allowances and taxes. By default, this is recalculated based on sub items total and overridden.</li>
 * <li>DocNumber:Reference number for the transaction.</li>
 * <li>TxnDate:The date entered by the user when this transaction occurred.</li>
 * <li>PrivateNote:User entered, organization-private note about the transaction. This note does not appear on the invoice to the customer. This field maps to the Memo field on the Invoice form.</li>
 * <li>Line:Individual line items of a transaction. Valid Line types include: Journal Entry Line, {DetailType:'JournalEntryLineDetail', JournalEntryLineDetail:</li>
 * <li></li>
 * </ul>
 * @param callback - {Function}
 */
function createJournalEntry(journalEntry, callback){
	
}





/*
 * Company Preferences
 * https://developer.intuit.com/blog/2015/06/18/multicurrency-for-us-companies-coming-in-quickbooks-online-v87
 * */

exports.createAccount=createAccount;
exports.getAccountDetails=getAccountDetails;
exports.updateAccount=updateAccount;
exports.findAccountDetailsByName=FindAccountDetailsByName;

exports.createSupplier=createSupplier;
exports.getSupplierDetails=getSupplierDetails;
exports.findSuppliersByName=findSuppliersByName;
exports.createVendor=createVendor;
exports.updateVendor=updateVendor
